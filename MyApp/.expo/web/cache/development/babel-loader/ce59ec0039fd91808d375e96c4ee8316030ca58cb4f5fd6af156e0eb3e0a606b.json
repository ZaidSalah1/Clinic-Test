{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pathJoin = pathJoin;\nexports.resolveUri = resolveUri;\nexports.selectAssetSource = selectAssetSource;\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _reactNative = require(\"react-native\");\nvar _AssetSourceResolver = _interopRequireDefault(require(\"./AssetSourceResolver\"));\nvar _PlatformUtils = require(\"./PlatformUtils\");\nvar assetMapOverride = (0, _PlatformUtils.getManifest)().assetMapOverride;\nfunction selectAssetSource(meta) {\n  var _meta$fileHashes$inde, _meta$fileUris$index, _manifest2$extra;\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = Object.assign({}, meta, assetMapOverride[meta.hash]);\n  }\n  var scale = _AssetSourceResolver.default.pickScale(meta.scales, _reactNative.PixelRatio.get());\n  var index = meta.scales.findIndex(function (s) {\n    return s === scale;\n  });\n  var hash = meta.fileHashes ? (_meta$fileHashes$inde = meta.fileHashes[index]) != null ? _meta$fileHashes$inde : meta.fileHashes[0] : meta.hash;\n  var uri = meta.fileUris ? (_meta$fileUris$index = meta.fileUris[index]) != null ? _meta$fileUris$index : meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return {\n      uri: resolveUri(uri),\n      hash: hash\n    };\n  }\n  var assetUrlOverride = (0, _PlatformUtils.getManifest)().assetUrlOverride;\n  if (assetUrlOverride) {\n    var _uri = pathJoin(assetUrlOverride, hash);\n    return {\n      uri: resolveUri(_uri),\n      hash: hash\n    };\n  }\n  var fileScale = scale === 1 ? '' : `@${scale}x`;\n  var fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n  var suffix = `/${encodeURIComponent(meta.name)}${fileScale}${fileExtension}`;\n  var params = new URLSearchParams({\n    platform: _expoModulesCore.Platform.OS,\n    hash: meta.hash\n  });\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    var _uri2 = meta.httpServerLocation + suffix + '?' + params;\n    return {\n      uri: _uri2,\n      hash: hash\n    };\n  }\n  var manifest2 = (0, _PlatformUtils.getManifest2)();\n  var devServerUrl = manifest2 != null && (_manifest2$extra = manifest2.extra) != null && (_manifest2$extra = _manifest2$extra.expoGo) != null && _manifest2$extra.developer ? 'http://' + manifest2.extra.expoGo.debuggerHost : (0, _PlatformUtils.getManifest)().developer ? (0, _PlatformUtils.getManifest)().bundleUrl : null;\n  if (devServerUrl) {\n    var baseUrl = new URL(meta.httpServerLocation + suffix, devServerUrl);\n    baseUrl.searchParams.set('platform', _expoModulesCore.Platform.OS);\n    baseUrl.searchParams.set('hash', meta.hash);\n    return {\n      uri: baseUrl.href,\n      hash: hash\n    };\n  }\n  if (_reactNative.NativeModules.ExponentKernel) {\n    return {\n      uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`,\n      hash: hash\n    };\n  }\n  return {\n    uri: '',\n    hash: hash\n  };\n}\nfunction resolveUri(uri) {\n  return _PlatformUtils.manifestBaseUrl ? new URL(uri, _PlatformUtils.manifestBaseUrl).href : uri;\n}\nfunction pathJoin() {\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  var combined = paths.map(function (part, index) {\n    if (index === 0) {\n      return part.trim().replace(/\\/*$/, '');\n    }\n    return part.trim().replace(/(^\\/*|\\/*$)/g, '');\n  }).filter(function (part) {\n    return part.length > 0;\n  }).join('/').split('/');\n  var resolved = [];\n  for (var part of combined) {\n    if (part === '..') {\n      resolved.pop();\n    } else if (part !== '.') {\n      resolved.push(part);\n    }\n  }\n  return resolved.join('/');\n}","map":{"version":3,"names":["_expoModulesCore","require","_reactNative","_AssetSourceResolver","_interopRequireDefault","_PlatformUtils","assetMapOverride","getManifest","selectAssetSource","meta","_meta$fileHashes$inde","_meta$fileUris$index","_manifest2$extra","hasOwnProperty","hash","Object","assign","scale","AssetSourceResolver","pickScale","scales","PixelRatio","get","index","findIndex","s","fileHashes","uri","fileUris","resolveUri","assetUrlOverride","pathJoin","fileScale","fileExtension","type","encodeURIComponent","suffix","name","params","URLSearchParams","platform","Platform","OS","test","httpServerLocation","manifest2","getManifest2","devServerUrl","extra","expoGo","developer","debuggerHost","bundleUrl","baseUrl","URL","searchParams","set","href","NativeModules","ExponentKernel","manifestBaseUrl","_len","arguments","length","paths","Array","_key","combined","map","part","trim","replace","filter","join","split","resolved","pop","push"],"sources":["C:\\Users\\zaid\\Desktop\\cli\\MyApp\\node_modules\\expo-asset\\src\\AssetSources.ts"],"sourcesContent":["import type { PackagerAsset } from '@react-native/assets-registry/registry';\nimport { Platform } from 'expo-modules-core';\nimport { PixelRatio, NativeModules } from 'react-native';\n\nimport AssetSourceResolver from './AssetSourceResolver';\nimport { getManifest, getManifest2, manifestBaseUrl } from './PlatformUtils';\n\n// @docsMissing\nexport type AssetMetadata = Pick<\n  PackagerAsset,\n  'httpServerLocation' | 'name' | 'hash' | 'type' | 'scales' | 'width' | 'height'\n> & {\n  uri?: string;\n  fileHashes?: string[];\n  fileUris?: string[];\n};\n\nexport type AssetSource = {\n  uri: string;\n  hash: string;\n};\n\n// Fast lookup check if asset map has any overrides in the manifest.\n// This value will always be either null or an absolute URL, e.g. `https://expo.dev/`\nconst assetMapOverride = getManifest().assetMapOverride;\n\n/**\n * Selects the best file for the given asset (ex: choosing the best scale for images) and returns\n * a { uri, hash } pair for the specific asset file.\n *\n * If the asset isn't an image with multiple scales, the first file is selected.\n */\nexport function selectAssetSource(meta: AssetMetadata): AssetSource {\n  // Override with the asset map in manifest if available\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = { ...meta, ...assetMapOverride[meta.hash] };\n  }\n\n  // This logic is based on that of AssetSourceResolver, with additional support for file hashes and\n  // explicitly provided URIs\n  const scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  const index = meta.scales.findIndex((s) => s === scale);\n  const hash = meta.fileHashes ? meta.fileHashes[index] ?? meta.fileHashes[0] : meta.hash;\n\n  // Allow asset processors to directly provide the URL to load\n  const uri = meta.fileUris ? meta.fileUris[index] ?? meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return { uri: resolveUri(uri), hash };\n  }\n\n  // Check if the assetUrl was overridden in the manifest\n  const assetUrlOverride = getManifest().assetUrlOverride;\n  if (assetUrlOverride) {\n    const uri = pathJoin(assetUrlOverride, hash);\n    return { uri: resolveUri(uri), hash };\n  }\n\n  const fileScale = scale === 1 ? '' : `@${scale}x`;\n  const fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n  const suffix = `/${encodeURIComponent(meta.name)}${fileScale}${fileExtension}`;\n  const params = new URLSearchParams({\n    platform: Platform.OS,\n    hash: meta.hash,\n  });\n\n  // For assets with a specified absolute URL, we use the existing origin instead of prepending the\n  // development server or production CDN URL origin\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    const uri = meta.httpServerLocation + suffix + '?' + params;\n    return { uri, hash };\n  }\n\n  // For assets during development using manifest2, we use the development server's URL origin\n  const manifest2 = getManifest2();\n\n  const devServerUrl = manifest2?.extra?.expoGo?.developer\n    ? 'http://' + manifest2.extra.expoGo.debuggerHost\n    : // For assets during development, we use the development server's URL origin\n    getManifest().developer\n    ? getManifest().bundleUrl\n    : null;\n  if (devServerUrl) {\n    const baseUrl = new URL(meta.httpServerLocation + suffix, devServerUrl);\n\n    baseUrl.searchParams.set('platform', Platform.OS);\n    baseUrl.searchParams.set('hash', meta.hash);\n    return {\n      uri: baseUrl.href,\n      hash,\n    };\n  }\n\n  // Temporary fallback for loading assets in Expo Go home\n  if (NativeModules.ExponentKernel) {\n    return { uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`, hash };\n  }\n\n  // In correctly configured apps, we arrive here if the asset is locally available on disk due to\n  // being managed by expo-updates, and `getLocalAssetUri(hash)` must return a local URI for this\n  // hash. Since the asset is local, we don't have a remote URL and specify an invalid URL (an empty\n  // string) as a placeholder.\n  return { uri: '', hash };\n}\n\n/**\n * Resolves the given URI to an absolute URI. If the given URI is already an absolute URI, it is\n * simply returned. Otherwise, if it is a relative URI, it is resolved relative to the manifest's\n * base URI.\n */\nexport function resolveUri(uri: string): string {\n  // `manifestBaseUrl` is always an absolute URL or `null`.\n  return manifestBaseUrl ? new URL(uri, manifestBaseUrl).href : uri;\n}\n\n// A very cheap path canonicalization like path.join but without depending on a `path` polyfill.\nexport function pathJoin(...paths: string[]): string {\n  // Start by simply combining paths, without worrying about \"..\" or \".\"\n  const combined = paths\n    .map((part, index) => {\n      if (index === 0) {\n        return part.trim().replace(/\\/*$/, '');\n      }\n      return part.trim().replace(/(^\\/*|\\/*$)/g, '');\n    })\n    .filter((part) => part.length > 0)\n    .join('/')\n    .split('/');\n\n  // Handle \"..\" and \".\" in paths\n  const resolved: string[] = [];\n  for (const part of combined) {\n    if (part === '..') {\n      resolved.pop(); // Remove the last element from the result\n    } else if (part !== '.') {\n      resolved.push(part);\n    }\n  }\n\n  return resolved.join('/');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}